private void showEntryCreationScreen() {
    GridPane grid = new GridPane();

    Label dateLabel = new Label("Date:");
    DatePicker datePicker = new DatePicker(LocalDate.now());
    Label titleLabel = new Label("Title:");
    TextField titleField = new TextField();
    Label contentLabel = new Label("Content:");
    TextArea contentArea = new TextArea();
    Label moodLabel = new Label("Mood:");
    ComboBox<String> moodComboBox = new ComboBox<>();
    moodComboBox.getItems().addAll("Happy", "Neutral", "Sad");
    moodComboBox.getSelectionModel().selectFirst();

    Button uploadImageButton = new Button("Upload Image");
    FileChooser fileChooser = new FileChooser();
    Label imageLabel = new Label("No image selected");

    ImageView imageView = new ImageView();
    imageView.setFitHeight(100);
    imageView.setFitWidth(100);

    uploadImageButton.setOnAction(e -> {
        File selectedFile = fileChooser.showOpenDialog(primaryStage);
        if (selectedFile != null) {
            imageLabel.setText(selectedFile.getName());
            Image image = new Image(selectedFile.toURI().toString());
            imageView.setImage(image);
        }
    });

    Button saveButton = new Button("Save");
    saveButton.setOnAction(e -> handleSaveEntry(datePicker.getValue(), titleField.getText(), contentArea.getText(), moodComboBox.getValue(), imageLabel.getText()));

    grid.add(dateLabel, 0, 0);
    grid.add(datePicker, 1, 0);
    grid.add(titleLabel, 0, 1);
    grid.add(titleField, 1, 1);
    grid.add(contentLabel, 0, 2);
    grid.add(contentArea, 1, 2);
    grid.add(moodLabel, 0, 3);
    grid.add(moodComboBox, 1, 3);
    grid.add(uploadImageButton, 0, 4);
    grid.add(imageLabel, 1, 4);
    grid.add(imageView, 1, 5);
    grid.add(saveButton, 1, 6);

    Scene scene = new Scene(grid, 400, 400);
    primaryStage.setTitle("New Diary Entry");
    primaryStage.setScene(scene);
}

private void showEditEntryScreen() {
    VBox layout = new VBox();

    Label selectEntryLabel = new Label("Select an entry to edit:");
    ComboBox<String> entryComboBox = new ComboBox<>();

    try (BufferedReader reader = new BufferedReader(new FileReader(ENTRIES_FILE))) {
        reader.lines()
            .filter(line -> line.startsWith(currentUser + ","))
            .forEach(entryComboBox.getItems()::add);
    } catch (IOException e) {
        showAlert("Error", "Unable to load entries for editing.");
    }

    Button editButton = new Button("Edit Selected Entry");
    editButton.setOnAction(e -> {
        String selectedEntry = entryComboBox.getValue();
        if (selectedEntry != null) {
            showEditDetailsScreen(selectedEntry);
        } else {
            showAlert("No Entry Selected", "Please select an entry to edit.");
        }
    });

    layout.getChildren().addAll(selectEntryLabel, entryComboBox, editButton);

    Scene scene = new Scene(layout, 400, 300);
    primaryStage.setTitle("Edit Diary Entry");
    primaryStage.setScene(scene);
}

private void showEditDetailsScreen(String entry) {
    GridPane grid = new GridPane();
    String[] entryDetails = entry.split(",");

    Label dateLabel = new Label("Date:");
    DatePicker datePicker = new DatePicker(LocalDate.parse(entryDetails[1]));
    Label titleLabel = new Label("Title:");
    TextField titleField = new TextField(entryDetails[2]);
    Label contentLabel = new Label("Content:");
    TextArea contentArea = new TextArea(entryDetails[3]);
    Label moodLabel = new Label("Mood:");
    ComboBox<String> moodComboBox = new ComboBox<>();
    moodComboBox.getItems().addAll("Happy", "Neutral", "Sad");
    moodComboBox.setValue(entryDetails[4]);

    Label imageLabel = new Label(entryDetails[5]);
    ImageView imageView = new ImageView();
    File imageFile = new File(entryDetails[5]);
    if (imageFile.exists()) {
        Image image = new Image(imageFile.toURI().toString());
        imageView.setImage(image);
    }
    imageView.setFitHeight(100);
    imageView.setFitWidth(100);

    Button saveButton = new Button("Save Changes");
    saveButton.setOnAction(e -> handleEditEntry(entry, datePicker.getValue(), titleField.getText(), contentArea.getText(), moodComboBox.getValue(), imageLabel.getText()));

    grid.add(dateLabel, 0, 0);
    grid.add(datePicker, 1, 0);
    grid.add(titleLabel, 0, 1);
    grid.add(titleField, 1, 1);
    grid.add(contentLabel, 0, 2);
    grid.add(contentArea, 1, 2);
    grid.add(moodLabel, 0, 3);
    grid.add(moodComboBox, 1, 3);
    grid.add(imageLabel, 0, 4);
    grid.add(imageView, 1, 4);
    grid.add(saveButton, 1, 5);

    Scene scene = new Scene(grid, 400, 400);
    primaryStage.setTitle("Edit Entry Details");
    primaryStage.setScene(scene);
}

private void showMotivationalQuote() {
    Map<String, List<String>> quotes = new HashMap<>();
    quotes.put("Happy", Arrays.asList("Keep shining, you're amazing!", "Spread your joy to the world!"));
    quotes.put("Neutral", Arrays.asList("Every day is a chance to grow.", "Stay steady and keep moving forward."));
    quotes.put("Sad", Arrays.asList("It's okay to not be okay.", "Keep going, brighter days are ahead."));

    String mood = "Neutral"; // Default if no mood is selected.

    try (BufferedReader reader = new BufferedReader(new FileReader(ENTRIES_FILE))) {
        Optional<String> lastEntry = reader.lines()
            .filter(line -> line.startsWith(currentUser + ","))
            .reduce((first, second) -> second);

        if (lastEntry.isPresent()) {
            String[] details = lastEntry.get().split(",");
            mood = details[4];
        }
    } catch (IOException e) {
        showAlert("Error", "Unable to retrieve last mood.");
    }

    List<String> moodQuotes = quotes.getOrDefault(mood, quotes.get("Neutral"));
    String randomQuote = moodQuotes.get(new Random().nextInt(moodQuotes.size()));

    showAlert("Motivational Quote", randomQuote);
}
