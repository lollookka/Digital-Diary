package application;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import java.io.*;
import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

public class DigitalDiary extends Application {

    private static final String USER_DATA_FILE = "users.csv";
    private static final String ENTRIES_FILE = "entries.csv";
    private static final String DELETED_ENTRIES_FILE = "deleted_entries.csv";

    private Stage primaryStage;
    private String currentUser;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        this.primaryStage = primaryStage;
        showLoginScreen();
    }

    private void showLoginScreen() {
        GridPane grid = new GridPane();

        Label usernameLabel = new Label("Username/Email:");
        TextField usernameField = new TextField();
        Label passwordLabel = new Label("Password:");
        PasswordField passwordField = new PasswordField();

        Button loginButton = new Button("Login");
        Button registerButton = new Button("Register");

        loginButton.setOnAction(e -> handleLogin(usernameField.getText(), passwordField.getText()));
        registerButton.setOnAction(e -> handleRegister(usernameField.getText(), passwordField.getText()));

        grid.add(usernameLabel, 0, 0);
        grid.add(usernameField, 1, 0);
        grid.add(passwordLabel, 0, 1);
        grid.add(passwordField, 1, 1);
        grid.add(loginButton, 0, 2);
        grid.add(registerButton, 1, 2);

        Scene scene = new Scene(grid, 300, 200);
        primaryStage.setTitle("Digital Diary - Login");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void handleLogin(String username, String password) {
        try (BufferedReader reader = new BufferedReader(new FileReader(USER_DATA_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] userDetails = line.split(",");
                if ((userDetails[0].equals(username) || userDetails[1].equals(username)) && userDetails[2].equals(password)) {
                    currentUser = username;
                    showDiaryScreen();
                    return;
                }
            }
            showAlert("Login Failed", "Invalid username or password.");
        } catch (IOException e) {
            showAlert("Error", "Unable to read user data.");
        }
    }

    private void handleRegister(String username, String password) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(USER_DATA_FILE, true))) {
            writer.write(username + "," + username + "@example.com," + password + "\n");
            showAlert("Registration Successful", "User registered successfully.");
        } catch (IOException e) {
            showAlert("Error", "Unable to save user data.");
        }
    }

    private void showDiaryScreen() {
        BorderPane layout = new BorderPane();

        VBox entryList = new VBox();
        Button newEntryButton = new Button("New Entry");
        Button editEntryButton = new Button("Edit Entry");
        Button viewAllButton = new Button("View All Entries");
        Button trashBinButton = new Button("Trash Bin");
        Button searchButton = new Button("Search Entries");
        Button motivationalButton = new Button("Get Motivational Quote");
        Button logoutButton = new Button("Logout");
        Button deleteEntryButton = new Button("Delete Entry"); 

        newEntryButton.setOnAction(e -> showEntryCreationScreen());
        editEntryButton.setOnAction(e -> showEditEntryScreen());
        viewAllButton.setOnAction(e -> showAllEntriesScreen());
        trashBinButton.setOnAction(e -> showTrashBinScreen());
        searchButton.setOnAction(e -> showSearchScreen());
        motivationalButton.setOnAction(e -> showMotivationalQuote());
        logoutButton.setOnAction(e -> showLoginScreen());
        deleteEntryButton.setOnAction(e -> showDeleteEntryScreen());

        layout.setCenter(entryList);
        HBox actions = new HBox(newEntryButton, editEntryButton, viewAllButton, 
                deleteEntryButton, trashBinButton, searchButton, 
                motivationalButton, logoutButton);
        layout.setBottom(actions);

        Scene scene = new Scene(layout, 600, 400);
        primaryStage.setTitle("Digital Diary - Welcome " + currentUser);
        primaryStage.setScene(scene);
    } 
    private void showDeleteEntryScreen() {
        VBox layout = new VBox();
        ListView<String> entryListView = new ListView<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(ENTRIES_FILE))) {
            List<String> entries = reader.lines()
                    .filter(line -> line.contains(currentUser))
                    .collect(Collectors.toList());
            entryListView.getItems().addAll(entries);
        } catch (IOException e) {
            showAlert("Error", "Unable to load entries.");
        }

        Button deleteButton = new Button("Delete");
        deleteButton.setOnAction(e -> {
            String selectedEntry = entryListView.getSelectionModel().getSelectedItem();
            if (selectedEntry != null) {
                handleDeleteEntry(selectedEntry);
                entryListView.getItems().remove(selectedEntry);
            }
        });

        Button backButton = new Button("Back");
        backButton.setOnAction(e -> showDiaryScreen());

        layout.getChildren().addAll(entryListView, deleteButton, backButton);

        Scene scene = new Scene(layout, 500, 300);
        primaryStage.setTitle("Delete Entry");
        primaryStage.setScene(scene);
    }

    private void handleDeleteEntry(String entry) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(DELETED_ENTRIES_FILE, true))) {
            writer.write(entry + "\n");
        } catch (IOException e) {
            showAlert("Error", "Unable to delete entry.");
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(ENTRIES_FILE))) {
            List<String> remainingEntries = reader.lines()
                    .filter(line -> !line.equals(entry))
                    .collect(Collectors.toList());

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(ENTRIES_FILE))) {
                for (String remainingEntry : remainingEntries) {
                    writer.write(remainingEntry + "\n");
                }
            } catch (IOException e) {
                showAlert("Error", "Unable to update entries file.");
            }
        } catch (IOException e) {
            showAlert("Error", "Unable to read entries file.");
        }
    }

    private void showAllEntriesScreen() {
        VBox layout = new VBox();
        ListView<String> entryListView = new ListView<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(ENTRIES_FILE))) {
            List<String> entries = reader.lines()
                    .filter(line -> line.contains(currentUser))
                    .sorted(Comparator.comparing(line -> LocalDate.parse(line.split(",")[1])))
                    .collect(Collectors.toList());
            entryListView.getItems().addAll(entries);
        } catch (IOException e) {
            showAlert("Error", "Unable to load entries.");
        }

        entryListView.setOnMouseClicked(e -> {
            String selectedEntry = entryListView.getSelectionModel().getSelectedItem();
            if (selectedEntry != null) {
                showEntryDetailsScreen(selectedEntry);
            }
        });

        Button backButton = new Button("Back to Home");
        backButton.setOnAction(e -> showDiaryScreen());

        layout.getChildren().addAll(entryListView, backButton);

        Scene scene = new Scene(layout, 500, 300);
        primaryStage.setTitle("View All Entries");
        primaryStage.setScene(scene);
    }

    private void showEntryDetailsScreen(String entry) {
        GridPane grid = new GridPane();
        String[] details = entry.split(",");

        Label dateLabel = new Label("Date: " + details[1]);
        Label titleLabel = new Label("Title: " + details[2]);
        Label contentLabel = new Label("Content: " + details[3]);
        Label moodLabel = new Label("Mood: " + details[4]);
        Label imageLabel = new Label("Image: " + details[5]);

        ImageView imageView = new ImageView();
        File imageFile = new File(details[5]);
        if (imageFile.exists()) {
            imageView.setImage(new Image(imageFile.toURI().toString()));
        }

        grid.add(dateLabel, 0, 0);
        grid.add(titleLabel, 0, 1);
        grid.add(contentLabel, 0, 2);
        grid.add(moodLabel, 0, 3);
        grid.add(imageLabel, 0, 4);
        grid.add(imageView, 0, 5);

        Button backButton = new Button("Back");
        backButton.setOnAction(e -> showDiaryScreen());

        grid.add(backButton, 0, 6);

        Scene scene = new Scene(grid, 500, 400);
        primaryStage.setTitle("Entry Details");
        primaryStage.setScene(scene);
    }

    private void showTrashBinScreen() {
        VBox layout = new VBox();
        ListView<String> trashListView = new ListView<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(DELETED_ENTRIES_FILE))) {
            List<String> deletedEntries = reader.lines()
                    .filter(line -> line.contains(currentUser))
                    .collect(Collectors.toList());
            trashListView.getItems().addAll(deletedEntries);
        } catch (IOException e) {
            showAlert("Error", "Unable to load trash bin entries.");
        }

        Button restoreButton = new Button("Restore Entry");
        restoreButton.setOnAction(e -> {
            String selectedEntry = trashListView.getSelectionModel().getSelectedItem();
            if (selectedEntry != null) {
                handleRestoreEntry(selectedEntry);
                trashListView.getItems().remove(selectedEntry);
            }
        });

        Button backButton = new Button("Back to Home");
        backButton.setOnAction(e -> showDiaryScreen());

        layout.getChildren().addAll(trashListView, restoreButton, backButton);

        Scene scene = new Scene(layout, 500, 300);
        primaryStage.setTitle("Trash Bin");
        primaryStage.setScene(scene);
    }

    private void handleRestoreEntry(String entry) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(ENTRIES_FILE, true))) {
            writer.write(entry + "\n");
        } catch (IOException e) {
            showAlert ("Error", "Unable to restore entry.");
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(DELETED_ENTRIES_FILE))) {
            List<String> remainingDeletedEntries = reader.lines()
                    .filter(line -> !line.equals(entry))
                    .collect(Collectors.toList());

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(DELETED_ENTRIES_FILE))) {
                for (String remainingEntry : remainingDeletedEntries) {
                    writer.write(remainingEntry + "\n");
                }
            } catch (IOException e) {
                showAlert("Error", "Unable to update deleted entries file.");
            }
        } catch (IOException e) {
            showAlert("Error", "Unable to read deleted entries file.");
        }
    }

    private void showEntryCreationScreen() {
        GridPane grid = new GridPane();

        Label dateLabel = new Label("Date:");
        DatePicker datePicker = new DatePicker(LocalDate.now());
        Label titleLabel = new Label("Title:");
        TextField titleField = new TextField();
        Label contentLabel = new Label("Content:");
        TextArea contentArea = new TextArea();
        Label moodLabel = new Label("Mood:");
        TextField moodField = new TextField();
        Label imageLabel = new Label("Image:");
        Button selectImageButton = new Button("Select Image");
        Label selectedImagePath = new Label("No image selected");

        selectImageButton.setOnAction(e -> {
            FileChooser fileChooser = new FileChooser();
            fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg"));
            File selectedFile = fileChooser.showOpenDialog(primaryStage);
            if (selectedFile != null) {
                selectedImagePath.setText(selectedFile.getAbsolutePath());
            }
        });

        Button saveButton = new Button("Save");
        Button backButton = new Button("Back");

        saveButton.setOnAction(e -> {
            String date = datePicker.getValue().toString();
            String title = titleField.getText();
            String content = contentArea.getText();
            String mood = moodField.getText();
            String imagePath = selectedImagePath.getText();

            if (!date.isEmpty() && !title.isEmpty() && !content.isEmpty()) {
                saveEntry(date, title, content, mood, imagePath);
                showDiaryScreen();
            } else {
                showAlert("Validation Error", "All fields except image are required.");
            }
        });

        backButton.setOnAction(e -> showDiaryScreen());

        grid.add(dateLabel, 0, 0);
        grid.add(datePicker, 1, 0);
        grid.add(titleLabel, 0, 1);
        grid.add(titleField, 1, 1);
        grid.add(contentLabel, 0, 2);
        grid.add(contentArea, 1, 2);
        grid.add(moodLabel, 0, 3);
        grid.add(moodField, 1, 3);
        grid.add(imageLabel, 0, 4);
        grid.add(selectImageButton, 1, 4);
        grid.add(selectedImagePath, 1, 5);
        grid.add(saveButton, 0, 6);
        grid.add(backButton, 1, 6);

        Scene scene = new Scene(grid, 500, 400);
        primaryStage.setTitle("New Entry");
        primaryStage.setScene(scene);
    }

    private void saveEntry(String date, String title, String content, String mood, String imagePath) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(ENTRIES_FILE, true))) {
            writer.write(currentUser + "," + date + "," + title + "," + content + "," + mood + "," + imagePath + "\n");
        } catch (IOException e) {
            showAlert("Error", "Unable to save the entry.");
        }
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void showMotivationalQuote() {
        Map<String, List<String>> quotes = new HashMap<>();
        quotes.put("Happy", Arrays.asList("Keep shining, you're amazing!", "Spread your joy to the world!"));
        quotes.put("Neutral", Arrays.asList("Every day is a chance to grow.", "Stay steady and keep moving forward."));
        quotes.put("Sad", Arrays.asList("It's okay to not be okay.", "Keep going, brighter days are ahead."));

        String mood = "Neutral"; // Default if no mood is selected.

        try (BufferedReader reader = new BufferedReader(new FileReader(ENTRIES_FILE))) {
            Optional<String> lastEntry = reader.lines()
                .filter(line -> line.contains(currentUser))
                .reduce((first, second) -> second);

            if (lastEntry.isPresent()) {
                String[] details = lastEntry.get().split(",");
                mood = details[4];
            }
        } catch (IOException e) {
            showAlert("Error", "Unable to retrieve last mood.");
        }

        List<String> moodQuotes = quotes.getOrDefault(mood, quotes.get("Neutral"));
        String randomQuote = moodQuotes.get(new Random().nextInt(moodQuotes.size()));

        showAlert("Motivational Quote", randomQuote);
    }
     
     private void showEditEntryScreen() {
        VBox layout = new VBox();

        Label selectEntryLabel = new Label("Select an entry to edit:");
        ComboBox<String> entryComboBox = new ComboBox<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(ENTRIES_FILE))) {
            reader.lines()
                .filter(line -> line.contains(currentUser))
                .forEach(entryComboBox.getItems()::add);
        } catch (IOException e) {
            showAlert("Error", "Unable to load entries for editing.");
        }

        Button editButton = new Button("Edit Selected Entry");
        editButton.setOnAction(e -> {
            String selectedEntry = entryComboBox.getValue();
            if (selectedEntry != null) {
                showEditDetailsScreen(selectedEntry);
            } else {
                showAlert("No Entry Selected", "Please select an entry to edit.");
            }
        });

        layout.getChildren().addAll(selectEntryLabel, entryComboBox, editButton);

        Scene scene = new Scene(layout, 400, 300);
        primaryStage.setTitle("Edit Diary Entry");
        primaryStage.setScene(scene);
    }

      private void showSearchScreen() {
        GridPane grid = new GridPane();

        Label searchLabel = new Label("Keyword:");
        TextField searchField = new TextField();
        Button searchButton = new Button("Search");
        Button backButton = new Button("Back to Home");
        TextArea resultsArea = new TextArea();
        resultsArea.setEditable(false);

        searchButton.setOnAction(e -> handleSearchEntries(searchField.getText(), resultsArea));
        backButton.setOnAction(e -> showDiaryScreen());

        grid.add(searchLabel, 0, 0);
        grid.add(searchField, 1, 0);
        grid.add(searchButton, 2, 0);
        grid.add(backButton, 3, 0);
        grid.add(resultsArea, 0, 1, 4, 1);

        Scene scene = new Scene(grid, 500, 300);
        primaryStage.setTitle("Search Entries");
        primaryStage.setScene(scene);
    }


}
