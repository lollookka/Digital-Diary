package application;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

import java.io.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class Main extends Application {

    private static final String USERS_FILE = "users.csv";

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Digital Diary - Login/Register");

        // Ensure the users.csv file exists
        try {
            ensureFileExists();
        } catch (IOException e) {
            e.printStackTrace();
            showErrorDialog("Error initializing file", e.getMessage());
        }

        // Create a grid for layout
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10));
        grid.setHgap(10);
        grid.setVgap(10);

        // Registration Section
        Label registerLabel = new Label("Register");
        TextField regUsername = new TextField();
        regUsername.setPromptText("Username");
        TextField regEmail = new TextField();
        regEmail.setPromptText("Email");
        PasswordField regPassword = new PasswordField();
        regPassword.setPromptText("Password");
        Button registerButton = new Button("Register");

        // Login Section
        Label loginLabel = new Label("Login");
        TextField loginInput = new TextField();
        loginInput.setPromptText("Email or Username");
        PasswordField loginPassword = new PasswordField();
        loginPassword.setPromptText("Password");
        Button loginButton = new Button("Login");

        Label messageLabel = new Label();

        // Add components to grid
        grid.add(registerLabel, 0, 0);
        grid.add(new Label("Username:"), 0, 1);
        grid.add(regUsername, 1, 1);
        grid.add(new Label("Email:"), 0, 2);
        grid.add(regEmail, 1, 2);
        grid.add(new Label("Password:"), 0, 3);
        grid.add(regPassword, 1, 3);
        grid.add(registerButton, 1, 4);

        grid.add(loginLabel, 0, 5);
        grid.add(new Label("Email/Username:"), 0, 6);
        grid.add(loginInput, 1, 6);
        grid.add(new Label("Password:"), 0, 7);
        grid.add(loginPassword, 1, 7);
        grid.add(loginButton, 1, 8);

        grid.add(messageLabel, 0, 9, 2, 1);

        // Event Handlers
        registerButton.setOnAction(e -> {
            Platform.runLater(() -> {
                try {
                    String username = regUsername.getText().trim();
                    String email = regEmail.getText().trim();
                    String password = regPassword.getText().trim();

                    if (username.isEmpty() || email.isEmpty() || password.isEmpty()) {
                        messageLabel.setText("All fields are required!");
                        return;
                    }

                    if (isUserExists(username, email)) {
                        messageLabel.setText("Username or Email already exists!");
                    } else {
                        String hashedPassword = hashPassword(password);
                        if (hashedPassword == null) {
                            messageLabel.setText("Error hashing password.");
                            return;
                        }
                        try (PrintWriter writer = new PrintWriter(new FileWriter(USERS_FILE, true))) {
                            writer.println(username + "," + email + "," + hashedPassword);
                        }
                        messageLabel.setText("Registration successful!");
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    messageLabel.setText("Error during registration.");
                }
            });
        });

        loginButton.setOnAction(e -> {
            Platform.runLater(() -> {
                try {
                    String input = loginInput.getText().trim();
                    String password = loginPassword.getText().trim();

                    if (input.isEmpty() || password.isEmpty()) {
                        messageLabel.setText("All fields are required!");
                        return;
                    }

                    String hashedPassword = hashPassword(password);
                    if (hashedPassword == null) {
                        messageLabel.setText("Error hashing password.");
                        return;
                    }

                    if (validateUser(input, hashedPassword)) {
                        messageLabel.setText("Login successful! Welcome!");
                    } else {
                        messageLabel.setText("Invalid credentials.");
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    messageLabel.setText("Error during login.");
                }
            });
        });

        // Set up the scene and show the stage
        Scene scene = new Scene(grid, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void ensureFileExists() throws IOException {
        File file = new File(USERS_FILE);
        if (!file.exists()) {
            file.createNewFile();
        }
    }

    private boolean isUserExists(String username, String email) throws IOException {
        synchronized (this) {
            try (BufferedReader reader = new BufferedReader(new FileReader(USERS_FILE))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] userDetails = line.trim().split(",");
                    if (userDetails.length >= 2 && 
                        (userDetails[0].equals(username) || userDetails[1].equals(email))) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean validateUser(String input, String hashedPassword) throws IOException {
        synchronized (this) {
            try (BufferedReader reader = new BufferedReader(new FileReader(USERS_FILE))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] userDetails = line.trim().split(",");
                    if (userDetails.length == 3 && 
                        (userDetails[0].equals(input) || userDetails[1].equals(input)) && 
                        userDetails[2].equals(hashedPassword)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hash = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : hash) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }

    private void showErrorDialog(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
